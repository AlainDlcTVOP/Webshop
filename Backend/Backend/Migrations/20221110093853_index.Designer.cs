// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221110093853_index")]
    partial class index
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Backend.Models.CartContent", b =>
                {
                    b.Property<int>("CartContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartContentId"), 1L, 1);

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalCost")
                        .HasColumnType("int");

                    b.HasKey("CartContentId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartContents");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c43faf17-272d-4015-bc96-2d8246f7b210",
                            ConcurrencyStamp = "b06dc2fa-509b-4e34-a86d-a0cf8d635609",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "fe6931a5-e048-4e75-9338-9695aaac1ec6",
                            ConcurrencyStamp = "4a8cb2d8-4d95-4816-bb21-52e2cea9c836",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e4d3f5db-2a9b-4861-b868-4ecacdf55bdc",
                            RoleId = "c43faf17-272d-4015-bc96-2d8246f7b210"
                        },
                        new
                        {
                            UserId = "95dbff2b-8bbc-47f1-bf5f-da1a5b02f2f7",
                            RoleId = "fe6931a5-e048-4e75-9338-9695aaac1ec6"
                        },
                        new
                        {
                            UserId = "c62b8495-e495-4080-9b37-e663b61dca1a",
                            RoleId = "fe6931a5-e048-4e75-9338-9695aaac1ec6"
                        },
                        new
                        {
                            UserId = "69464244-4205-4bf5-ac3b-fd878316ef26",
                            RoleId = "fe6931a5-e048-4e75-9338-9695aaac1ec6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SkiShop.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e4d3f5db-2a9b-4861-b868-4ecacdf55bdc",
                            AccessFailedCount = 0,
                            Address = "Gatan 1",
                            City = "Köping",
                            ConcurrencyStamp = "91ce149e-e2e8-40a4-aaee-2fb2ca70d2a9",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Adminsson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOWtKLFgF5q7ZEIcbCoyRLK9vU757d+a8bZVh9Dg6+nLIV/hRqG7Vspnd3UUotnKoA==",
                            PhoneNumber = "9999999999",
                            PhoneNumberConfirmed = false,
                            PostalCode = "11122",
                            SecurityStamp = "1c9e5890-93be-4067-b2cc-6ec69be70b84",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "95dbff2b-8bbc-47f1-bf5f-da1a5b02f2f7",
                            AccessFailedCount = 0,
                            Address = "Göteborgsvägen 50",
                            City = "Alingsås",
                            ConcurrencyStamp = "f34d854e-c1cd-46f5-afe7-b017cdc1c7a6",
                            Email = "annaa@example.com",
                            EmailConfirmed = false,
                            FirstName = "Anna",
                            LastName = "Andersson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNAA@EXAMPLE.COM",
                            NormalizedUserName = "ANNAA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFpfSd+UoooSZeQKgIhW/M158W3A3VJSPpQ7fZaD11s22niQa+IoxxQCd8mHfNJFpA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            PostalCode = "44143",
                            SecurityStamp = "c5d9c7aa-7317-41af-89e8-c41592fc6e99",
                            TwoFactorEnabled = false,
                            UserName = "annaa@example.com"
                        },
                        new
                        {
                            Id = "c62b8495-e495-4080-9b37-e663b61dca1a",
                            AccessFailedCount = 0,
                            Address = "Alingsåsvägen 10",
                            City = "Borås",
                            ConcurrencyStamp = "0a9b9949-c09c-4821-96ee-27aee7799bea",
                            Email = "bennyb@example.com",
                            EmailConfirmed = false,
                            FirstName = "Benny",
                            LastName = "Bengtsson",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENNYB@EXAMPLE.COM",
                            NormalizedUserName = "BENNYB@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFN3gQ3z3CIu8MuEgtVyro+Gmh4ha5695OYPYINff0XFfCfa3+GHvy6JDW3nJZ0ZUw==",
                            PhoneNumber = "2345678901",
                            PhoneNumberConfirmed = false,
                            PostalCode = "50467",
                            SecurityStamp = "91c98ac5-27c4-4ad6-9f04-b76e48ede327",
                            TwoFactorEnabled = false,
                            UserName = "bennyb@example.com"
                        },
                        new
                        {
                            Id = "69464244-4205-4bf5-ac3b-fd878316ef26",
                            AccessFailedCount = 0,
                            Address = "Boråsvägen 100",
                            City = "Göteborg",
                            ConcurrencyStamp = "d89c8e6c-4447-485d-8da4-9084ae220b9d",
                            Email = "gunnarg@example.com",
                            EmailConfirmed = false,
                            FirstName = "Gunnar",
                            LastName = "Gunnarsson",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUNNARG@EXAMPLE.COM",
                            NormalizedUserName = "GUNNARG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMaNawzd2sebtQgEnEFLJNNqh7JPQx+18zBNt6+hTiJXhGQeHNW3/W8+N6WDT2PH5g==",
                            PhoneNumber = "3456789012",
                            PhoneNumberConfirmed = false,
                            PostalCode = "41276",
                            SecurityStamp = "917dbb60-db9b-42a2-b450-1995d4cf023d",
                            TwoFactorEnabled = false,
                            UserName = "gunnarg@example.com"
                        });
                });

            modelBuilder.Entity("SkiShop.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("Src")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Alt = "",
                            Name = "Black Crows",
                            ProductID = 1,
                            Src = "~/image/BLACK Crows Nocta 22-23 page 3.png"
                        },
                        new
                        {
                            Id = 2,
                            Alt = "",
                            Name = "VÖLKL Deacon V Werks",
                            ProductID = 2,
                            Src = "~/image/VÖLKL Deacon V Werks.png"
                        },
                        new
                        {
                            Id = 3,
                            Alt = "",
                            Name = "SCARPA Alien",
                            ProductID = 3,
                            Src = "~/image/SCARPA Alien.png"
                        },
                        new
                        {
                            Id = 4,
                            Alt = "",
                            Name = "SCARPA Alien",
                            ProductID = 4,
                            Src = "~/image/SCARPA Alien.png"
                        },
                        new
                        {
                            Id = 5,
                            Alt = "",
                            Name = "BLACK Diamond Quickdraw Probe",
                            ProductID = 5,
                            Src = "~/image/BLACK Diamond Quickdraw Probe.png"
                        },
                        new
                        {
                            Id = 6,
                            Alt = "",
                            Name = "BLACK Diamond Quickdraw Probe",
                            ProductID = 6,
                            Src = "~/image/BLACK Diamond Quickdraw Probe.png"
                        },
                        new
                        {
                            Id = 7,
                            Alt = "",
                            Name = "PEAK Performance Hat Black",
                            ProductID = 7,
                            Src = "~/image/PEAK Performance Hat Black.png"
                        },
                        new
                        {
                            Id = 8,
                            Alt = "",
                            Name = "PEAK Performance Hat Black",
                            ProductID = 8,
                            Src = "~/image/PEAK Performance Hat Black.png"
                        });
                });

            modelBuilder.Entity("SkiShop.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "95dbff2b-8bbc-47f1-bf5f-da1a5b02f2f7",
                            Comments = "Deliver asap",
                            Date = new DateTime(2022, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Delivered"
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "c62b8495-e495-4080-9b37-e663b61dca1a",
                            Comments = "",
                            Date = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Shipped"
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = "69464244-4205-4bf5-ac3b-fd878316ef26",
                            Comments = "Deliver after October 30 2022",
                            Date = new DateTime(2022, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("SkiShop.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("RowAmount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Skidor, Dam",
                            OrderID = 1,
                            Price = 4000.0,
                            ProductID = 1,
                            Quantity = 1,
                            RowAmount = 4000.0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pjäxa, Dam",
                            OrderID = 1,
                            Price = 5300.0,
                            ProductID = 3,
                            Quantity = 1,
                            RowAmount = 5300.0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Stavar, Herr",
                            OrderID = 2,
                            Price = 1100.0,
                            ProductID = 6,
                            Quantity = 1,
                            RowAmount = 1100.0
                        },
                        new
                        {
                            Id = 4,
                            Name = "Hjälm, Herr",
                            OrderID = 2,
                            Price = 2100.0,
                            ProductID = 8,
                            Quantity = 2,
                            RowAmount = 4200.0
                        },
                        new
                        {
                            Id = 5,
                            Name = "Pjäxa, Herr",
                            OrderID = 3,
                            Price = 6000.0,
                            ProductID = 4,
                            Quantity = 1,
                            RowAmount = 6000.0
                        },
                        new
                        {
                            Id = 6,
                            Name = "Stavar, Herr",
                            OrderID = 3,
                            Price = 1100.0,
                            ProductID = 6,
                            Quantity = 2,
                            RowAmount = 2200.0
                        });
                });

            modelBuilder.Entity("SkiShop.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InStock")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Produktbeskrivning...",
                            InStock = 10,
                            Name = "Skidor, Dam",
                            Price = 4000.0
                        },
                        new
                        {
                            Id = 2,
                            Description = "Produktbeskrivning...",
                            InStock = 12,
                            Name = "Skidor, Herr",
                            Price = 5000.0
                        },
                        new
                        {
                            Id = 3,
                            Description = "Produktbeskrivning...",
                            InStock = 2,
                            Name = "Pjäxa, Dam",
                            Price = 5300.0
                        },
                        new
                        {
                            Id = 4,
                            Description = "Produktbeskrivning...",
                            InStock = 6,
                            Name = "Pjäxa, Herr",
                            Price = 6000.0
                        },
                        new
                        {
                            Id = 5,
                            Description = "Produktbeskrivning...",
                            InStock = 12,
                            Name = "Stavar, Dam",
                            Price = 900.0
                        },
                        new
                        {
                            Id = 6,
                            Description = "Produktbeskrivning...",
                            InStock = 4,
                            Name = "Stavar, Herr",
                            Price = 1100.0
                        },
                        new
                        {
                            Id = 7,
                            Description = "Produktbeskrivning...",
                            InStock = 11,
                            Name = "Hjälm, Dam",
                            Price = 2300.0
                        },
                        new
                        {
                            Id = 8,
                            Description = "Produktbeskrivning...",
                            InStock = 9,
                            Name = "Hjälm, Herr",
                            Price = 2100.0
                        });
                });

            modelBuilder.Entity("Backend.Models.CartContent", b =>
                {
                    b.HasOne("SkiShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SkiShop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SkiShop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkiShop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SkiShop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkiShop.Models.Image", b =>
                {
                    b.HasOne("SkiShop.Models.Product", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkiShop.Models.Order", b =>
                {
                    b.HasOne("SkiShop.Models.ApplicationUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkiShop.Models.OrderItem", b =>
                {
                    b.HasOne("SkiShop.Models.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkiShop.Models.ApplicationUser", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SkiShop.Models.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SkiShop.Models.Product", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
