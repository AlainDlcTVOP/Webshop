// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b4478087-867a-4452-8c5a-fd7851ea4b13",
                            ConcurrencyStamp = "f96a4d55-712a-4e25-ab4e-fb7ce9646d1f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "93d8cb7e-65eb-45a1-91b1-dd607435ee66",
                            ConcurrencyStamp = "0dd3f6e6-f5d4-4786-95b9-9418b72dd149",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "656162e3-7c38-440f-8161-33aa934d6698",
                            RoleId = "b4478087-867a-4452-8c5a-fd7851ea4b13"
                        },
                        new
                        {
                            UserId = "45a4f92d-ba51-4e97-8ea3-5c3a179e0dbb",
                            RoleId = "93d8cb7e-65eb-45a1-91b1-dd607435ee66"
                        },
                        new
                        {
                            UserId = "e7eafa14-6c9e-455b-8dbf-4a33e87e5d9a",
                            RoleId = "93d8cb7e-65eb-45a1-91b1-dd607435ee66"
                        },
                        new
                        {
                            UserId = "c94ff3d5-1de6-4520-ba1f-3b0d17027afd",
                            RoleId = "93d8cb7e-65eb-45a1-91b1-dd607435ee66"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SkiShop.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "656162e3-7c38-440f-8161-33aa934d6698",
                            AccessFailedCount = 0,
                            Address = "Gatan 1",
                            City = "Köping",
                            ConcurrencyStamp = "c841d350-15db-4330-9458-172c6d1cc7bd",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Adminsson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJcKy9jk8J3QkMdASvesezKzWz9WGRPUeE1SkSuC15IICvPm/wAMicQHs6+GXeTzWA==",
                            PhoneNumber = "9999999999",
                            PhoneNumberConfirmed = false,
                            PostalCode = "11122",
                            SecurityStamp = "b5292cd4-597e-4174-85a6-73a8e51511f1",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "45a4f92d-ba51-4e97-8ea3-5c3a179e0dbb",
                            AccessFailedCount = 0,
                            Address = "Göteborgsvägen 50",
                            City = "Alingsås",
                            ConcurrencyStamp = "cc1b4270-d8d7-4ba9-850f-7fdc0a279401",
                            Email = "annaa@example.com",
                            EmailConfirmed = false,
                            FirstName = "Anna",
                            LastName = "Andersson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNAA@EXAMPLE.COM",
                            NormalizedUserName = "ANNAA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHhy0gQuoTGDY18iYokPz/HKHv9s8VykUW948E9Ie2dDi9tXcK5WtGXo5U6pMv73mQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            PostalCode = "44143",
                            SecurityStamp = "1bd61587-0281-4337-90c8-9c9d4d6da488",
                            TwoFactorEnabled = false,
                            UserName = "annaa@example.com"
                        },
                        new
                        {
                            Id = "e7eafa14-6c9e-455b-8dbf-4a33e87e5d9a",
                            AccessFailedCount = 0,
                            Address = "Alingsåsvägen 10",
                            City = "Borås",
                            ConcurrencyStamp = "d16a1aca-ffb2-4735-9a1b-f78e30aba920",
                            Email = "bennyb@example.com",
                            EmailConfirmed = false,
                            FirstName = "Benny",
                            LastName = "Bengtsson",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENNYB@EXAMPLE.COM",
                            NormalizedUserName = "BENNYB@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMDksPOFORLLOR/YiennKMV7a2yksx8GfDznlJ/y7a2rawFQLtj4PGaEEN8+H7x4lg==",
                            PhoneNumber = "2345678901",
                            PhoneNumberConfirmed = false,
                            PostalCode = "50467",
                            SecurityStamp = "0a341420-9c0f-4361-9585-d9da8657f1b9",
                            TwoFactorEnabled = false,
                            UserName = "bennyb@example.com"
                        },
                        new
                        {
                            Id = "c94ff3d5-1de6-4520-ba1f-3b0d17027afd",
                            AccessFailedCount = 0,
                            Address = "Boråsvägen 100",
                            City = "Göteborg",
                            ConcurrencyStamp = "770264b1-b4c1-4c7d-aec3-2c4c8f4b59de",
                            Email = "gunnarg@example.com",
                            EmailConfirmed = false,
                            FirstName = "Gunnar",
                            LastName = "Gunnarsson",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUNNARG@EXAMPLE.COM",
                            NormalizedUserName = "GUNNARG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELrQwRH+viClZBHLpr/F85n8kMfZxt5u7bVYTNrUSmpKKAEB0bF1HJU0Cf/5EUQ+dQ==",
                            PhoneNumber = "3456789012",
                            PhoneNumberConfirmed = false,
                            PostalCode = "41276",
                            SecurityStamp = "fa098f29-11ba-46d1-ab27-c06c8dbaa140",
                            TwoFactorEnabled = false,
                            UserName = "gunnarg@example.com"
                        });
                });

            modelBuilder.Entity("SkiShop.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("Src")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Alt = "",
                            Name = "Black Crows",
                            ProductID = 1,
                            Src = "image/BLACKCrowsNocta22-23page3.png"
                        },
                        new
                        {
                            Id = 2,
                            Alt = "",
                            Name = "VÖLKL Deacon V Werks",
                            ProductID = 2,
                            Src = "image/VÖLKLDeaconVWerks.png"
                        },
                        new
                        {
                            Id = 3,
                            Alt = "",
                            Name = "SCARPA Alien",
                            ProductID = 3,
                            Src = "image/SCARPAAlien.png"
                        },
                        new
                        {
                            Id = 4,
                            Alt = "",
                            Name = "SCARPA Alien",
                            ProductID = 4,
                            Src = "image/SCARPAAlien.png"
                        },
                        new
                        {
                            Id = 5,
                            Alt = "",
                            Name = "BLACK Diamond Quickdraw Probe",
                            ProductID = 5,
                            Src = "image/BLACKDiamondQuickdrawProbe.png"
                        },
                        new
                        {
                            Id = 6,
                            Alt = "",
                            Name = "BLACK Diamond Quickdraw Probe",
                            ProductID = 6,
                            Src = "image/BLACKDiamondQuickdrawProbe.png"
                        },
                        new
                        {
                            Id = 7,
                            Alt = "",
                            Name = "PEAK Performance Hat Black",
                            ProductID = 7,
                            Src = "image/PEAKPerformanceHatBlack.png"
                        },
                        new
                        {
                            Id = 8,
                            Alt = "",
                            Name = "PEAK Performance Hat Black",
                            ProductID = 8,
                            Src = "image/PEAKPerformanceHatBlack.png"
                        });
                });

            modelBuilder.Entity("SkiShop.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "45a4f92d-ba51-4e97-8ea3-5c3a179e0dbb",
                            Comments = "Deliver asap",
                            Date = new DateTime(2022, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Delivered"
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "e7eafa14-6c9e-455b-8dbf-4a33e87e5d9a",
                            Comments = "",
                            Date = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Shipped"
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = "c94ff3d5-1de6-4520-ba1f-3b0d17027afd",
                            Comments = "Deliver after October 30 2022",
                            Date = new DateTime(2022, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("SkiShop.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("RowAmount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Skidor, Dam",
                            OrderID = 1,
                            Price = 4000.0,
                            ProductID = 1,
                            Quantity = 1,
                            RowAmount = 4000.0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pjäxa, Dam",
                            OrderID = 1,
                            Price = 5300.0,
                            ProductID = 3,
                            Quantity = 1,
                            RowAmount = 5300.0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Stavar, Herr",
                            OrderID = 2,
                            Price = 1100.0,
                            ProductID = 6,
                            Quantity = 1,
                            RowAmount = 1100.0
                        },
                        new
                        {
                            Id = 4,
                            Name = "Hjälm, Herr",
                            OrderID = 2,
                            Price = 2100.0,
                            ProductID = 8,
                            Quantity = 2,
                            RowAmount = 4200.0
                        },
                        new
                        {
                            Id = 5,
                            Name = "Pjäxa, Herr",
                            OrderID = 3,
                            Price = 6000.0,
                            ProductID = 4,
                            Quantity = 1,
                            RowAmount = 6000.0
                        },
                        new
                        {
                            Id = 6,
                            Name = "Stavar, Herr",
                            OrderID = 3,
                            Price = 1100.0,
                            ProductID = 6,
                            Quantity = 2,
                            RowAmount = 2200.0
                        });
                });

            modelBuilder.Entity("SkiShop.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InStock")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Produktbeskrivning...",
                            InStock = 10,
                            Name = "Skidor, Dam",
                            Price = 4000.0
                        },
                        new
                        {
                            Id = 2,
                            Description = "Produktbeskrivning...",
                            InStock = 12,
                            Name = "Skidor, Herr",
                            Price = 5000.0
                        },
                        new
                        {
                            Id = 3,
                            Description = "Produktbeskrivning...",
                            InStock = 2,
                            Name = "Pjäxa, Dam",
                            Price = 5300.0
                        },
                        new
                        {
                            Id = 4,
                            Description = "Produktbeskrivning...",
                            InStock = 6,
                            Name = "Pjäxa, Herr",
                            Price = 6000.0
                        },
                        new
                        {
                            Id = 5,
                            Description = "Produktbeskrivning...",
                            InStock = 12,
                            Name = "Stavar, Dam",
                            Price = 900.0
                        },
                        new
                        {
                            Id = 6,
                            Description = "Produktbeskrivning...",
                            InStock = 4,
                            Name = "Stavar, Herr",
                            Price = 1100.0
                        },
                        new
                        {
                            Id = 7,
                            Description = "Produktbeskrivning...",
                            InStock = 11,
                            Name = "Hjälm, Dam",
                            Price = 2300.0
                        },
                        new
                        {
                            Id = 8,
                            Description = "Produktbeskrivning...",
                            InStock = 9,
                            Name = "Hjälm, Herr",
                            Price = 2100.0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SkiShop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SkiShop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkiShop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SkiShop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkiShop.Models.Image", b =>
                {
                    b.HasOne("SkiShop.Models.Product", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkiShop.Models.Order", b =>
                {
                    b.HasOne("SkiShop.Models.ApplicationUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkiShop.Models.OrderItem", b =>
                {
                    b.HasOne("SkiShop.Models.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkiShop.Models.ApplicationUser", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SkiShop.Models.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SkiShop.Models.Product", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
