// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Backend.Models.CartContent", b =>
                {
                    b.Property<int>("CartContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartContentId"), 1L, 1);

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalCost")
                        .HasColumnType("int");

                    b.HasKey("CartContentId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartContents");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "649225db-9022-4734-aece-9b2b0431fdf2",
                            ConcurrencyStamp = "6d6cee13-8546-4fa0-a663-86e1c9986831",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "af53c463-b5c8-4357-bdd2-7685705c0bb3",
                            ConcurrencyStamp = "cfe9fb1e-f644-4418-9113-f240c428584e",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "4a1fe60e-0187-4bbe-800d-fedb1c5e5453",
                            RoleId = "649225db-9022-4734-aece-9b2b0431fdf2"
                        },
                        new
                        {
                            UserId = "335187b8-8860-4083-b2fa-4680f8e55be0",
                            RoleId = "af53c463-b5c8-4357-bdd2-7685705c0bb3"
                        },
                        new
                        {
                            UserId = "b3422e03-52ba-42ec-8720-67198b71e7c7",
                            RoleId = "af53c463-b5c8-4357-bdd2-7685705c0bb3"
                        },
                        new
                        {
                            UserId = "49f10d61-846d-4529-ba03-f70973ea5909",
                            RoleId = "af53c463-b5c8-4357-bdd2-7685705c0bb3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SkiShop.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4a1fe60e-0187-4bbe-800d-fedb1c5e5453",
                            AccessFailedCount = 0,
                            Address = "Gatan 1",
                            City = "Köping",
                            ConcurrencyStamp = "e2154ee4-7547-4a55-b17c-aa3ca49e9fe9",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Adminsson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDkQ1l6L4aD4h5e7/KbD2eucQbYKozwI28q+LZJYW8TYTyF39z1JC7rku7AnjwvoYw==",
                            PhoneNumber = "9999999999",
                            PhoneNumberConfirmed = false,
                            PostalCode = "11122",
                            SecurityStamp = "be4ffd11-5af4-473f-a24a-dccfc3d617cb",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "335187b8-8860-4083-b2fa-4680f8e55be0",
                            AccessFailedCount = 0,
                            Address = "Göteborgsvägen 50",
                            City = "Alingsås",
                            ConcurrencyStamp = "35e51f54-df55-474d-af93-dbd87afa35d4",
                            Email = "annaa@example.com",
                            EmailConfirmed = false,
                            FirstName = "Anna",
                            LastName = "Andersson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNAA@EXAMPLE.COM",
                            NormalizedUserName = "ANNAA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAynml8Y9UEVI98d3KSob4BxZKDFInV+CMniK02rC8eH7oPrbGY+JdPCMu8S9yuC5g==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            PostalCode = "44143",
                            SecurityStamp = "9ebc7f91-d7a0-4b6c-97c3-7a09b85bc2b1",
                            TwoFactorEnabled = false,
                            UserName = "annaa@example.com"
                        },
                        new
                        {
                            Id = "b3422e03-52ba-42ec-8720-67198b71e7c7",
                            AccessFailedCount = 0,
                            Address = "Alingsåsvägen 10",
                            City = "Borås",
                            ConcurrencyStamp = "28301705-a08e-4d6f-bd79-d858b96ebf07",
                            Email = "bennyb@example.com",
                            EmailConfirmed = false,
                            FirstName = "Benny",
                            LastName = "Bengtsson",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENNYB@EXAMPLE.COM",
                            NormalizedUserName = "BENNYB@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEF7dPZ090zchHaxKmZJ0KCKgHt3+f2PLNAOYYF763evn9k9QnR25SfXnf8917rvtbQ==",
                            PhoneNumber = "2345678901",
                            PhoneNumberConfirmed = false,
                            PostalCode = "50467",
                            SecurityStamp = "33553a76-87eb-40f0-9c9a-f5529c49947f",
                            TwoFactorEnabled = false,
                            UserName = "bennyb@example.com"
                        },
                        new
                        {
                            Id = "49f10d61-846d-4529-ba03-f70973ea5909",
                            AccessFailedCount = 0,
                            Address = "Boråsvägen 100",
                            City = "Göteborg",
                            ConcurrencyStamp = "cffdcdf2-9d93-4284-b783-408289bc6cfd",
                            Email = "gunnarg@example.com",
                            EmailConfirmed = false,
                            FirstName = "Gunnar",
                            LastName = "Gunnarsson",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUNNARG@EXAMPLE.COM",
                            NormalizedUserName = "GUNNARG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELyPzKo6SDlxAFfVoz7W0rpTs3ITLlqj7rx4yEmOhA9/BVLLdsNYEMMr2qJi8dsXlQ==",
                            PhoneNumber = "3456789012",
                            PhoneNumberConfirmed = false,
                            PostalCode = "41276",
                            SecurityStamp = "7d40852d-36d5-4012-b5f0-7888222f8fdf",
                            TwoFactorEnabled = false,
                            UserName = "gunnarg@example.com"
                        });
                });

            modelBuilder.Entity("SkiShop.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("Src")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Alt = "",
                            Name = "VÖLKL Katana VWerks Offpist",
                            ProductID = 1,
                            Src = "images/VÖLKLKatanaVWerks.png"
                        },
                        new
                        {
                            Id = 2,
                            Alt = "",
                            Name = "VÖLKL Deacon V Werks",
                            ProductID = 2,
                            Src = "images/VÖLKLDeaconVWerks.png"
                        },
                        new
                        {
                            Id = 3,
                            Alt = "",
                            Name = "VÖLKL Racetiger",
                            ProductID = 3,
                            Src = "images/VÖLKLRacetiger.png"
                        },
                        new
                        {
                            Id = 4,
                            Alt = "",
                            Name = "Black Crows",
                            ProductID = 4,
                            Src = "images/BLACKCrowsNocta22-23page3.png"
                        },
                        new
                        {
                            Id = 5,
                            Alt = "",
                            Name = "SCARPA Alien 1.1 mens boot",
                            ProductID = 5,
                            Src = "images/SCARPAAlien.png"
                        },
                        new
                        {
                            Id = 6,
                            Alt = "",
                            Name = "Dalbello Lupo Pro HD",
                            ProductID = 6,
                            Src = "images/DALBELLOLupoProHD.png"
                        },
                        new
                        {
                            Id = 7,
                            Alt = "",
                            Name = "Peak Performance M Alpine Red",
                            ProductID = 7,
                            Src = "images/PeakPerformanceAlpineJacket.png"
                        },
                        new
                        {
                            Id = 8,
                            Alt = "",
                            Name = "PeakPerformance W Ski Down Jacket Black",
                            ProductID = 8,
                            Src = "images/PeakPerformanceWAlpineJacket.png"
                        },
                        new
                        {
                            Id = 9,
                            Alt = "",
                            Name = "Black Crows W Ora Body Map Jacket Dark Blue",
                            ProductID = 9,
                            Src = "images/BlackCrowsWJacketDBlue.png"
                        },
                        new
                        {
                            Id = 10,
                            Alt = "",
                            Name = "Norröna M Lofoten Pants Indigo Night ",
                            ProductID = 10,
                            Src = "images/NorrönaLofotenProPants.png"
                        },
                        new
                        {
                            Id = 11,
                            Alt = "",
                            Name = "Houdini M Purpose Pants Bucket Blue",
                            ProductID = 11,
                            Src = "images/HoudiniPurposePantsBlue.png"
                        },
                        new
                        {
                            Id = 12,
                            Alt = "",
                            Name = "Black Diamond Probe",
                            ProductID = 12,
                            Src = "images/BlackDiamondQuickDrawProbe.png"
                        },
                        new
                        {
                            Id = 13,
                            Alt = "",
                            Name = "Peak Performance Mason Hat Black",
                            ProductID = 13,
                            Src = "images/PeakPerformanceHatBlack.png"
                        },
                        new
                        {
                            Id = 14,
                            Alt = "",
                            Name = "Black Crows Duo Firebird poles",
                            ProductID = 14,
                            Src = "images/BlackCrowsPoles.png"
                        },
                        new
                        {
                            Id = 15,
                            Alt = "",
                            Name = "Black Diamond Deploy",
                            ProductID = 15,
                            Src = "images/BlackDiamondDeploy.png"
                        });
                });

            modelBuilder.Entity("SkiShop.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("OrderAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "335187b8-8860-4083-b2fa-4680f8e55be0",
                            Comments = "Deliver asap",
                            Date = new DateTime(2022, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderAmount = 23435.0,
                            ShippedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Delivered"
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "b3422e03-52ba-42ec-8720-67198b71e7c7",
                            Comments = "",
                            Date = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderAmount = 11500.0,
                            ShippedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Shipped"
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = "49f10d61-846d-4529-ba03-f70973ea5909",
                            Comments = "Deliver after October 30 2022",
                            Date = new DateTime(2022, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderAmount = 11498.0,
                            ShippedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("SkiShop.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("RowAmount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "VÖLKL Katana VWerks Offpist",
                            OrderID = 1,
                            Price = 10990.0,
                            ProductID = 1,
                            Quantity = 1,
                            RowAmount = 10990.0
                        },
                        new
                        {
                            Id = 2,
                            Name = "SCARPA Alien 1.1 mens boot",
                            OrderID = 1,
                            Price = 10495.0,
                            ProductID = 5,
                            Quantity = 1,
                            RowAmount = 10495.0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Black Crows Duo Firebird poles",
                            OrderID = 1,
                            Price = 1400.0,
                            ProductID = 6,
                            Quantity = 1,
                            RowAmount = 1400.0
                        },
                        new
                        {
                            Id = 4,
                            Name = "Peak Performance Mason Hat Black",
                            OrderID = 1,
                            Price = 550.0,
                            ProductID = 13,
                            Quantity = 2,
                            RowAmount = 550.0
                        },
                        new
                        {
                            Id = 5,
                            Name = "Peak Performance M Alpine Red",
                            OrderID = 2,
                            Price = 6500.0,
                            ProductID = 7,
                            Quantity = 1,
                            RowAmount = 6500.0
                        },
                        new
                        {
                            Id = 6,
                            Name = "Houdini M Purpose Pants Bucket Blue",
                            OrderID = 2,
                            Price = 5000.0,
                            ProductID = 11,
                            Quantity = 1,
                            RowAmount = 5000.0
                        },
                        new
                        {
                            Id = 7,
                            Name = "Black Crows W Ora Body Map Jacket Dark Blue",
                            OrderID = 3,
                            Price = 5749.0,
                            ProductID = 11,
                            Quantity = 1,
                            RowAmount = 5749.0
                        });
                });

            modelBuilder.Entity("SkiShop.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InStock")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "VÖLKL Katana V-Werks 22-23",
                            InStock = 6,
                            Name = "Skidor, Herr",
                            Price = 10990.0
                        },
                        new
                        {
                            Id = 2,
                            Description = "VÖLKL Deacon V Werks",
                            InStock = 12,
                            Name = "Skidor, Herr",
                            Price = 13499.0
                        },
                        new
                        {
                            Id = 3,
                            Description = "VÖLKL Racetiger SL 22-23",
                            InStock = 10,
                            Name = "Skidor, Herr",
                            Price = 9999.0
                        },
                        new
                        {
                            Id = 4,
                            Description = "Black Crows Nocta 22-23",
                            InStock = 10,
                            Name = "Skidor, Herr",
                            Price = 8000.0
                        },
                        new
                        {
                            Id = 5,
                            Description = "SCARPA Alien 1.1 mens boot",
                            InStock = 2,
                            Name = "Pjäxa",
                            Price = 10495.0
                        },
                        new
                        {
                            Id = 6,
                            Description = "Dalbello Lupo Pro HD",
                            InStock = 4,
                            Name = "Pjäxa",
                            Price = 7499.0
                        },
                        new
                        {
                            Id = 7,
                            Description = "Peak Performance M Alpine RED",
                            InStock = 6,
                            Name = "Jacka, Herr",
                            Price = 6500.0
                        },
                        new
                        {
                            Id = 8,
                            Description = "Peak Performance W Ski Down Jacket Black",
                            InStock = 6,
                            Name = "Jacka, Dam",
                            Price = 7000.0
                        },
                        new
                        {
                            Id = 9,
                            Description = "Black Crows W Ora Body Map Jacket Dark Blue",
                            InStock = 3,
                            Name = "Jacka, Dam",
                            Price = 5749.0
                        },
                        new
                        {
                            Id = 10,
                            Description = "Norröna M Lofoten Gore-Tex Pants Indigo Night",
                            InStock = 6,
                            Name = "Byxor, Herr",
                            Price = 6999.0
                        },
                        new
                        {
                            Id = 11,
                            Description = "Houdini M Purpose Pants Bucket Blue",
                            InStock = 8,
                            Name = "Byxor, Herr",
                            Price = 5000.0
                        },
                        new
                        {
                            Id = 12,
                            Description = "BLACK Diamond Quick Draw Probe",
                            InStock = 12,
                            Name = "Probe",
                            Price = 699.0
                        },
                        new
                        {
                            Id = 13,
                            Description = "PEAK Performance Mason Hat Black",
                            InStock = 25,
                            Name = "Mössa, Unisex",
                            Price = 550.0
                        },
                        new
                        {
                            Id = 14,
                            Description = "Black Crows Duo Firebird poles",
                            InStock = 15,
                            Name = "Stavar, Unisex",
                            Price = 1400.0
                        },
                        new
                        {
                            Id = 15,
                            Description = "Black Diamond Deploy",
                            InStock = 15,
                            Name = "Spade",
                            Price = 799.0
                        });
                });

            modelBuilder.Entity("Backend.Models.CartContent", b =>
                {
                    b.HasOne("SkiShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SkiShop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SkiShop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkiShop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SkiShop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkiShop.Models.Image", b =>
                {
                    b.HasOne("SkiShop.Models.Product", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkiShop.Models.Order", b =>
                {
                    b.HasOne("SkiShop.Models.ApplicationUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkiShop.Models.OrderItem", b =>
                {
                    b.HasOne("SkiShop.Models.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkiShop.Models.ApplicationUser", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SkiShop.Models.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SkiShop.Models.Product", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
